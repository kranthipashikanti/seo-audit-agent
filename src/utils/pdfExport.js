import jsPDF from 'jspdf';

// Altudo Brand Colors
const ALTUDO_COLORS = {
  yellow: '#FFC800',
  yellowLight: '#FFD633',
  yellowDark: '#E6B400',
  black: '#000000',
  gray: {
    50: '#FAFAFA',
    100: '#F5F5F5',
    200: '#E5E5E5',
    300: '#D4D4D4',
    400: '#A3A3A3',
    500: '#737373',
    600: '#525252',
    700: '#404040',
    800: '#262626',
    900: '#171717'
  }
};

// PDF Configuration
const PDF_CONFIG = {
  margin: 20,
  pageWidth: 210, // A4 width in mm
  pageHeight: 297, // A4 height in mm
  lineHeight: 6,
  fontSize: {
    title: 20,
    subtitle: 16,
    heading: 14,
    body: 10,
    small: 8
  }
};

export const generateSEOAuditPDF = (auditResults, summary) => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  let yPosition = PDF_CONFIG.margin;
  
  // Helper function to add new page if needed
  const checkPageBreak = (requiredHeight = 15) => {
    if (yPosition + requiredHeight > PDF_CONFIG.pageHeight - PDF_CONFIG.margin) {
      pdf.addPage();
      yPosition = PDF_CONFIG.margin;
      return true;
    }
    return false;
  };

  // Helper function to wrap text
  const wrapText = (text, maxWidth) => {
    return pdf.splitTextToSize(text, maxWidth);
  };

  // Add Header with Altudo Branding
  const addHeader = () => {
    // Altudo Yellow Header Bar
    pdf.setFillColor(255, 200, 0); // #FFC800
    pdf.rect(0, 0, PDF_CONFIG.pageWidth, 25, 'F');
    
    // Company Name
    pdf.setTextColor(0, 0, 0); // Black text
    pdf.setFontSize(PDF_CONFIG.fontSize.title);
    pdf.setFont('helvetica', 'bold');
    pdf.text('ALTUDO', PDF_CONFIG.margin, 15);
    
    // Report Title
    pdf.setFontSize(PDF_CONFIG.fontSize.subtitle);
    pdf.setFont('helvetica', 'normal');
    pdf.text('SEO Audit Report', PDF_CONFIG.pageWidth - PDF_CONFIG.margin - 50, 15);
    
    yPosition = 35;
  };

  // Add Footer
  const addFooter = () => {
    const pageHeight = pdf.internal.pageSize.height;
    pdf.setFontSize(PDF_CONFIG.fontSize.small);
    pdf.setTextColor(115, 115, 115); // Gray
    pdf.text(
      `Generated by Altudo SEO Audit Tool • ${new Date().toLocaleDateString()}`,
      PDF_CONFIG.margin,
      pageHeight - 10
    );
    pdf.text(
      `Page ${pdf.internal.getNumberOfPages()}`,
      PDF_CONFIG.pageWidth - PDF_CONFIG.margin - 20,
      pageHeight - 10
    );
  };

  // Start Report Generation
  addHeader();

  // Executive Summary
  pdf.setFontSize(PDF_CONFIG.fontSize.heading);
  pdf.setFont('helvetica', 'bold');
  pdf.setTextColor(0, 0, 0);
  pdf.text('Executive Summary', PDF_CONFIG.margin, yPosition);
  yPosition += 10;

  if (summary) {
    pdf.setFontSize(PDF_CONFIG.fontSize.body);
    pdf.setFont('helvetica', 'normal');
    
    // Summary Stats
    const summaryData = [
      `Total Pages Audited: ${summary.total}`,
      `Average SEO Score: ${summary.avgScore}/100`,
      `Pages with Good Scores (80+): ${summary.goodPages}`,
      `Pages with Poor Scores (<60): ${summary.poorPages}`,
      `Total Issues Found: ${summary.totalIssues}`,
      `Average Load Time: ${summary.avgLoadTime}ms`
    ];

    summaryData.forEach(stat => {
      checkPageBreak();
      pdf.text(`• ${stat}`, PDF_CONFIG.margin + 5, yPosition);
      yPosition += PDF_CONFIG.lineHeight;
    });
  }

  yPosition += 10;

  // Issues by Priority
  if (summary && (summary.criticalIssues > 0 || summary.highIssues > 0 || summary.mediumIssues > 0)) {
    checkPageBreak(25);
    
    pdf.setFontSize(PDF_CONFIG.fontSize.heading);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Issues by Priority', PDF_CONFIG.margin, yPosition);
    yPosition += 10;

    // Critical Issues
    if (summary.criticalIssues > 0) {
      pdf.setFillColor(239, 68, 68); // Red
      pdf.rect(PDF_CONFIG.margin, yPosition - 4, 5, 5, 'F');
      pdf.setFontSize(PDF_CONFIG.fontSize.body);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`Critical Issues: ${summary.criticalIssues}`, PDF_CONFIG.margin + 10, yPosition);
      pdf.setFont('helvetica', 'normal');
      pdf.text('(Fix immediately)', PDF_CONFIG.margin + 60, yPosition);
      yPosition += 8;
    }

    // High Priority Issues
    if (summary.highIssues > 0) {
      pdf.setFillColor(249, 115, 22); // Orange
      pdf.rect(PDF_CONFIG.margin, yPosition - 4, 5, 5, 'F');
      pdf.setFont('helvetica', 'bold');
      pdf.text(`High Priority Issues: ${summary.highIssues}`, PDF_CONFIG.margin + 10, yPosition);
      pdf.setFont('helvetica', 'normal');
      pdf.text('(Fix soon)', PDF_CONFIG.margin + 70, yPosition);
      yPosition += 8;
    }

    // Medium Priority Issues
    if (summary.mediumIssues > 0) {
      pdf.setFillColor(251, 191, 36); // Yellow
      pdf.rect(PDF_CONFIG.margin, yPosition - 4, 5, 5, 'F');
      pdf.setFont('helvetica', 'bold');
      pdf.text(`Medium Priority Issues: ${summary.mediumIssues}`, PDF_CONFIG.margin + 10, yPosition);
      pdf.setFont('helvetica', 'normal');
      pdf.text('(Fix when possible)', PDF_CONFIG.margin + 80, yPosition);
      yPosition += 8;
    }

    yPosition += 10;
  }

  // Detailed Page Analysis
  checkPageBreak();
  pdf.setFontSize(PDF_CONFIG.fontSize.heading);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Detailed Page Analysis', PDF_CONFIG.margin, yPosition);
  yPosition += 10;

  auditResults.forEach((result, index) => {
    checkPageBreak(30);

    // Page Header
    pdf.setFillColor(248, 250, 252); // Light gray background
    pdf.rect(PDF_CONFIG.margin - 2, yPosition - 5, PDF_CONFIG.pageWidth - 2 * PDF_CONFIG.margin + 4, 12, 'F');
    
    pdf.setFontSize(PDF_CONFIG.fontSize.body);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 0, 0);
    
    // URL (truncate if too long)
    const urlText = result.url.length > 60 ? result.url.substring(0, 60) + '...' : result.url;
    pdf.text(`${index + 1}. ${urlText}`, PDF_CONFIG.margin, yPosition);
    
    // Score
    const scoreColor = result.score >= 80 ? [34, 197, 94] : result.score >= 60 ? [251, 191, 36] : [239, 68, 68];
    pdf.setTextColor(...scoreColor);
    pdf.text(`Score: ${result.score}/100`, PDF_CONFIG.pageWidth - PDF_CONFIG.margin - 30, yPosition);
    
    yPosition += 8;

    // Page Details
    pdf.setTextColor(0, 0, 0);
    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(PDF_CONFIG.fontSize.small);
    
    const pageDetails = [
      `Title: ${result.metrics?.title?.content || 'No title found'}`,
      `Meta Description: ${result.metrics?.metaDescription?.content || 'No meta description found'}`,
      `Load Time: ${result.metrics?.performance?.loadTime || 0}ms`,
      `Word Count: ${result.metrics?.content?.wordCount || 0}`,
      `Images: ${result.metrics?.images?.total || 0} total, ${result.metrics?.images?.withoutAlt || 0} missing alt text`
    ];

    pageDetails.forEach(detail => {
      checkPageBreak();
      const wrappedText = wrapText(detail, PDF_CONFIG.pageWidth - 2 * PDF_CONFIG.margin - 10);
      wrappedText.forEach(line => {
        pdf.text(`• ${line}`, PDF_CONFIG.margin + 5, yPosition);
        yPosition += 5;
      });
    });

    // Issues and Resolutions
    if (result.issuesWithResolutions && result.issuesWithResolutions.length > 0) {
      yPosition += 5;
      checkPageBreak();
      
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(PDF_CONFIG.fontSize.body);
      pdf.text('Issues & Solutions:', PDF_CONFIG.margin + 5, yPosition);
      yPosition += 8;

      result.issuesWithResolutions.forEach(issueData => {
        checkPageBreak(20);
        
        // Issue Priority Badge
        const priorityColor = issueData.priority === 'critical' ? [239, 68, 68] : 
                             issueData.priority === 'high' ? [249, 115, 22] : [251, 191, 36];
        pdf.setFillColor(...priorityColor);
        pdf.rect(PDF_CONFIG.margin + 10, yPosition - 4, 3, 3, 'F');
        
        // Issue Title
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(PDF_CONFIG.fontSize.small);
        pdf.setTextColor(0, 0, 0);
        const issueTitle = `${issueData.priority?.toUpperCase()} - ${issueData.issue}`;
        const wrappedIssueTitle = wrapText(issueTitle, PDF_CONFIG.pageWidth - 2 * PDF_CONFIG.margin - 20);
        wrappedIssueTitle.forEach(line => {
          pdf.text(line, PDF_CONFIG.margin + 18, yPosition);
          yPosition += 5;
        });

        // Solution
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(64, 64, 64);
        const wrappedSolution = wrapText(`Solution: ${issueData.solution}`, PDF_CONFIG.pageWidth - 2 * PDF_CONFIG.margin - 25);
        wrappedSolution.forEach(line => {
          checkPageBreak();
          pdf.text(line, PDF_CONFIG.margin + 20, yPosition);
          yPosition += 5;
        });

        // Implementation Steps
        if (issueData.implementation && issueData.implementation.length > 0) {
          pdf.text('How to fix:', PDF_CONFIG.margin + 20, yPosition);
          yPosition += 5;
          
          issueData.implementation.forEach(step => {
            checkPageBreak();
            const wrappedStep = wrapText(`- ${step}`, PDF_CONFIG.pageWidth - 2 * PDF_CONFIG.margin - 30);
            wrappedStep.forEach(line => {
              pdf.text(line, PDF_CONFIG.margin + 25, yPosition);
              yPosition += 5;
            });
          });
        }

        // Time to Fix and Impact
        if (issueData.timeToFix || issueData.impact) {
          pdf.setTextColor(115, 115, 115);
          pdf.text(`Time to fix: ${issueData.timeToFix || 'N/A'} | Impact: ${issueData.impact || 'N/A'}`, PDF_CONFIG.margin + 20, yPosition);
          yPosition += 8;
        }

        yPosition += 3;
      });
    }

    yPosition += 10;
  });

  // Add footer to all pages
  for (let i = 1; i <= pdf.internal.getNumberOfPages(); i++) {
    pdf.setPage(i);
    addFooter();
  }

  // Generate filename with timestamp
  const timestamp = new Date().toISOString().split('T')[0];
  const filename = `Altudo-SEO-Audit-Report-${timestamp}.pdf`;

  // Save the PDF
  pdf.save(filename);
};